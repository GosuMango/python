#!/usr/bin/env python3
print("Content-type: text/html\n")

import cgi
import cgitb
import random
import json
import os

cgitb.enable()

STATE_FILE = "/home/students/odd/2027/myu70/public_html/final/memory"

# Initialize global variables
money = 1000.0
odds = {
    "full loss": 0.45,
    "small loss": 0.25,
    "small win": 0.25,
    "big win": 0.04,
    "jackpot": 0.01
}

titles = {
    (-float('inf'), -1000000): "Beyond Homeless ü•Ä‚ù§Ô∏è‚Äçü©π",
    (-1000000, -10000): "Big Bum ü•Ä",
    (-10000, 2500): "Lvl 1 Crook",
    (2500, 10000): "Lvl 25 Mafia Member",
    (10000, 1000000): "Lvl 100 Mafia Boss",
    (1000000, float('inf')): "Supreme Gambling Entity"
}

def get_title(money):
    for (low, high), title in titles.items():
        if low < money <= high:
            return title
    return "Unknown"

def save_state():
    with open(STATE_FILE, "w") as f:
        json.dump({"money": money, "odds": odds}, f)

def load_state():
    global money, odds
    if os.path.exists(STATE_FILE):
        try:
            with open(STATE_FILE, "r") as f:
                data = json.load(f)
                money = data.get("money", 1000.0)
                odds = data.get("odds", odds)
        except Exception:
            # corrupted file, reset to defaults and save
            money = 1000.0
            odds = {
                "full loss": 0.45,
                "small loss": 0.25,
                "small win": 0.25,
                "big win": 0.04,
                "jackpot": 0.01
            }
            save_state()
    else:
        # file does not exist, create it with defaults
        save_state()

def normalize(odds):
    total = sum(odds.values())
    return {k: v / total for k, v in odds.items()}

def gamble(bet):
    global money, odds
    r = random.random()
    total = 0
    for outcome, prob in odds.items():
        total += prob
        if r < total:
            if outcome == "full loss":
                money -= bet
            elif outcome == "small loss":
                money -= bet * 0.4
            elif outcome == "small win":
                money += bet * 0.5
            elif outcome == "big win":
                money += bet * 1.2
            elif outcome == "jackpot":
                money += bet * 5
            return outcome
    return "no outcome"

def multigamble(bet, times):
    results = []
    for _ in range(times):
        if bet > 0:
            result = gamble(bet)
            results.append(result)
    return results

def boost_wins(cost=100):
    global money, odds
    if money < cost:
        return "<p class = 'bigsize middle'> Not enough money to boost. </p>"
    money -= cost
    reduce_full = min(0.01, odds["full loss"])
    reduce_small = min(0.01, odds["small loss"])
    gain = reduce_full + reduce_small
    odds["full loss"] -= reduce_full
    odds["small loss"] -= reduce_small
    odds["small win"] += gain * 0.5
    odds["big win"] += gain * 0.3
    odds["jackpot"] += gain * 0.2
    odds = normalize(odds)
    return "<p class = 'bigsize middle'> Win odds boosted! </p>"

def boost_jackpot(cost=150):
    global money, odds
    if money < cost:
        return "<p class = 'bigsize middle'> Not enough money to boost jackpot. </p>"
    money -= cost
    reduce_small_win = min(0.01, odds["small win"])
    reduce_big_win = min(0.01, odds["big win"])
    total_gain = reduce_small_win + reduce_big_win
    odds["small win"] -= reduce_small_win
    odds["big win"] -= reduce_big_win
    odds["jackpot"] += total_gain
    odds = normalize(odds)
    return "<p class = 'bigsize middle'> Jackpot chance boosted! </p>"

def brokey():
    global money
    if money <= 250:
        money += 500
        return "You were given $500."
    return "<p class = 'bigsize middle'>Stop being a greedy bu
